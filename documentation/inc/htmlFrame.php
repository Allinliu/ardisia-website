<h3>Overview</h3>
<p>
	The HtmlFrame component displays a HTML iframe inside a Flex component. 
	Developers can create multiple instances in a single Flex application. 
</p>
<p>
	The HtmFrame can display a border and background generated by Flash, and 
	will manage an embedded iframe within the container's boundaries.
</p>
<p>
	Note that this component should be used with care due to the complexity of 
	the interaction between the browser and the Flash VM, the constantly 
	changing nature of web browsers, and the sheer multitude of browsers and 
	browser versions.
</p>

<h3>AIR</h3>
<p>
	This component will <strong>NOT</strong> work within the AIR environment. 
	For HTML support in AIR, try the native mx.controls.HTML and 
	flash.html.HTMLLoader classes.
</p>

<h3>Creating the HtmlFrame Component</h3>
<p>
	The HtmlFrame extends Skinnable Component and can be added to any container 
	that supports IVisualElementContainer.  
</p>

<h3>Using the HtmlFrame Component</h3>
<p>
	There is no property used to set the frame's content.  Instead, after 
	creation, call setFrameSourceURL() to load a URL, or set raw HTML via the 
	setFrameRawHTML() method.  It is even possible to call any Javascript 
	function via callFrameFunction().
</p>
<p>
	Will not correctly load embedded content from library swcs.  All embedded
	content should be local to the project.
</p>

<h3>wMode</h3>
<p>
	Note that this component will function correctly without changing the wmode 
	or any setting in the HTML wrapper. Other Flash HTML wrappers require the 
	wmode property of the Flash player to be changed to function correctly, to 
	the detriment of performance. The Ardisia HtmlFrame component works without 
	this limitation.
</p>

<h3>Browser Zoom</h3>
<p>
	Browsers can be zoomed.  This creates problems for Flex applications because 
	the HTML iframe will change size but the underlying Flex app will not. 
</p>
<p>
	It is not possible to block a user from zooming the browser. Even if the 
	mouse wheel + ctrl events are swallowed, users can zoom within their 
	browser's menu options. 
</p>
<p>
	There is currently no reliable way to detect browser zoom levels across all 
	browsers and browser versions.
</p>

<h3>Javascript</h3>
<p>
	When creating custom Javascript calls, it is suggested to apply all 
	Javascript listeners inline to avoid cross-browser issues. E.G. Some 
	versions of IE do not support addEventListener (uses attachEvent). Also, 
	when adding event handlers, it is suggested to add them as anonymous inner 
	functions because pointers to declared functions didn't work in all 
	browsers. 
</p>
<pre class="prettyprint">
var element = getElementById('test');
element.onclick = function(e) {  
	alert('I was clicked!');
}
</pre>

<h3>Layout</h3>
<p>
	Position the component like any visual element. The position of the frame 
	will stay locked because all of the parent containers have MOVE listeners 
	attached.
</p>

<h3>Styling the iFrame directly</h3>
<p>
	Style the iFrame directly via the setStyleProperty() method.
</p>

<h3>z-Index</h3>
<p>
	Does not manage visibility or z level automatically. To change the z level 
	of the HTML frame, change the zIndex style property via a function call 
	like this: 
</p>
<pre class="prettyprint">
htmlFrame.setStyleProperty('zIndex', '1000');
</pre>

<h3>Removing the HtmlFrame</h3>
<p>
	Call dispose() to remove the Flex container and the HTML iframe and 
	listeners. This is the only way to remove the iframe from the browser.
</p>
<p>
	After the frame is removed from the Flash stage, listeners will be removed
	but the iframe will persist until dispose() is called.
</p>

<h3>Memory Leaks</h3>
<p>
	To keep the frame's position locked, all parents of the frame up to the
	systemManager have MOVE listeners attached. This means that none of the
	parents can be garbage collected until the listeners are removed or
	the frame is removed and disposed.  
</p>
<p>
	Call dispose() to clear all the MOVE listeners and enable garbage
	collection.
</p>

<h3>Focus</h3>
<p>
	The iframe can steal focus away when moused and the Flex application does 
	not detect click events on the iframe.  Therefore, if you put the frame 
	inside a Pane container, or any container that changes its appearance when 
	it is inactive, you may want to use a skin that has its inactive state 
	removed.
</p>

<h3>Frame Visibility</h3>
<p>
	Use the "visible" property on the HtmlFrame component to hide the iframe and 
	the Flex wrapper.
</p>
<p>
	Note, most browsers will not display any content in an iframe until the
	page is fully loaded. In other words, do not expect unstyled content to
	be displayed.
</p>

<h3>Printing</h3>
<p>
	Print the HTML iframe via the printFrame() method.  Printing will often 
	times be blocked for external URLs due to security limitations.  
</p>

<h3>Security and External URLs and Local Testing</h3>
<p>
	Be conscious of cross domain security issues. For example, printing will 
	often times be blocked for external URLs due to security limitations. Also, 
	to test this control locally, remember to set the Security.allowDomain("*") 
	setting in the top level application document.
</p>
<p>
	Local testing only worked for the Firefox browser.  Chrome doesn't appear
	to work properly until the application is online.
</p>

<h3>Examples</h3>
<p>
	Load the Flex Apache page
<pre class="prettyprint">
&lt;fx:htmlFrame:HtmlFrame id="frame"
	  width="100%" height="100%"
	  borderColor="0"
	  backgroundColor="0xFFFFFF"
	  borderThickness="2"
	  creationComplete="frame.setFrameSourceURL('http://flex.apache.org/');"/&gt;
</pre>
</p>
<p>
	Load pdf
<pre class="prettyprint">
&lt;fx:htmlFrame:HtmlFrame id="frame"
	  width="100%" height="100%"
	  borderColor="0"
	  backgroundColor="0xFFFFFF"
	  borderThickness="2"
	  creationComplete="frame.setFrameSourceURL('assets/docs/sample.pdf/');"/&gt;
</pre>
</p>
<p>
	See the HtmlFrame demo application for more example code.
</p>

<h3>Custom Events</h3>
<p>
	<b>FRAME_ONLOAD</b><br>
	ardisia.components.htmlFrame.events.HtmlFrameEvent<br>
	Dispatched when the "onload" event is dispatched by the HTML frame.
</p>

<h3>Custom Styles</h3>
<p>
	<b>backgroundColor</b><br>
	default #FFFFFF<br>
	The color of the background. Does not apply to the iframe, only Flash 
	regions exposed by padding.
</p>
<p>
	<b>backgroundAlpha</b><br>
	default 1<br>
	The alpha of the background.
</p>
<p>
	<b>borderColor</b><br>
	default defaults.css<br>
	The color of the border.
</p>
<p>
	<b>borderAlpha</b><br>
	default 1<br>
	The alpha of the border.
</p>
<p>
	<b>borderThickness</b><br>
	default 1<br>
	The thickness of the border.
</p>

<h3>Themes &amp; Skinning</h3>
<p>
	Included is a skin for the Spark theme. 
</p>

<h3>Known Issues</h3>
<p>
	<ul>
		<li>
			Most browsers will not display any content in an iframe until all of 
			the page's content is fully loaded. Do not expect lazy loading and 
			unstyled content to be displayed.
		</li>
		<li>
			setFrameRawHTML() calls after the src has been set will always fail 
			(setting src to 'about:blank' did not work). 
		</li>
		<li>If a frame is set to display: 'none'; it will never dispatch 'load' 
			events.</li>
		<li>Javascript will not stop executing code on errors. Use Firebug to 
			see the errors.</li>
		<li>Internet Explorer may not allow relative URLs.</li>
	</ul>
</p>
